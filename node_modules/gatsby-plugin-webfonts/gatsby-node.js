"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.onPreBootstrap = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _createOptions = _interopRequireDefault(require("./create-options"));

var _webFonts = _interopRequireDefault(require("./web-fonts"));

var onPreBootstrap =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(_ref, pluginOptions) {
    var cache, createContentDigest, store, pathPrefix, directory, cacheFolder, publicFolder, options, optionsCacheKey, cachedOptions, filter;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cache = _ref.cache, createContentDigest = _ref.createContentDigest, store = _ref.store, pathPrefix = _ref.pathPrefix;
            directory = store.getState().program.directory;
            cacheFolder = _path["default"].join(directory, ".cache", "webfonts");
            publicFolder = _path["default"].join(directory, "public", "static", "webfonts");
            options = (0, _createOptions["default"])((0, _extends2["default"])({}, pluginOptions, {
              cacheFolder: cacheFolder,
              pathPrefix: pathPrefix
            }));
            optionsCacheKey = "options-" + createContentDigest(options);
            _context.next = 8;
            return cache.get(optionsCacheKey);

          case 8:
            cachedOptions = _context.sent;

            if (cachedOptions) {
              _context.next = 14;
              break;
            }

            _context.next = 12;
            return (0, _webFonts["default"])(options);

          case 12:
            _context.next = 14;
            return cache.set(optionsCacheKey, options);

          case 14:
            filter = function filter(src) {
              return _path["default"].extname(src) !== ".css";
            };

            _context.next = 17;
            return _fsExtra["default"].copy(cacheFolder, publicFolder, {
              filter: filter
            });

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function onPreBootstrap(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.onPreBootstrap = onPreBootstrap;